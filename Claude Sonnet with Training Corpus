!pip install boto3

import os
os.environ['AWS_ACCESS_KEY_ID'] = 'access_key'
os.environ['AWS_SECRET_ACCESS_KEY'] = 'secret_key'
os.environ['AWS_DEFAULT_REGION'] = 'us-east-1'

import boto3

bedrock_client = boto3.client('bedrock-runtime')

import boto3
import json

# Initialize the AWS Bedrock client for Claude 3.5 Sonnet
bedrock_client = boto3.client('bedrock-runtime', region_name='us-east-1')

# Define the model ID for Claude 3.5 Sonnet
model_id = 'us.anthropic.claude-3-5-sonnet-20241022-v2:0'  # Update this if it's different

def create_prompt_from_corpus(corpus, input_text):
    """
    Creates a few-shot learning prompt using the corpus.
    """
    prompt = "Translate the following sentences between English and Bengali:\n\n"

    # Add first few examples from the corpus to the prompt
    for line in corpus[:5]:  # Limiting to the first 5 pairs for example
        parts = line.strip().split(" -> ")
        if len(parts) == 2:
            english, bengali = parts
            prompt += f"English: {english} -> Bengali: {bengali}\n"

    # Add the user's input sentence for translation
    prompt += f"\nNow, translate the following sentence to Bengali:\nEnglish: {input_text}"

    return prompt

def translate_with_few_shot(input_text, corpus):
    """
    Translates the input text using few-shot learning with the provided corpus.
    """
    prompt = create_prompt_from_corpus(corpus, input_text)

    input_data = {
        "anthropic_version": "bedrock-2023-05-31",  # Model version
        "max_tokens": 200,  # Max tokens for response
        "temperature": 0,  # Control randomness of the response
        "top_p": 0.999,  # Optional: for nucleus sampling
        "messages": [
            {
                "role": "user",  # User's input
                "content": [
                    {
                        "type": "text",  # Type of content
                        "text": prompt  # Few-shot learning prompt
                    }
                ]
            }
        ]
    }

    try:
        # Send request to invoke the model
        response = bedrock_client.invoke_model(
            body=json.dumps(input_data),
            modelId=model_id,
            accept='application/json',
            contentType='application/json'
        )

        # Parse the response from the model
        response_body = json.loads(response['body'].read())

        # Extract the translated text from the response
        translated_text = response_body.get('content', [])[0].get('text', 'Unable to translate.')

        return translated_text

    except Exception as e:
        return f"Error translating text: {str(e)}"

# Load your dataset from the S3 file (if not already loaded)
def load_file(file_path):
    """
    Loads the contents of a .txt file into a variable.
    Each line should be in the format: "English sentence -> Bengali sentence".
    """
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.readlines()  # Read all lines in the file
    return content

# Specify the path to your .txt file
file_path = '/content/translation_corpus.txt'  # Update this to your file path

# Load the content from the .txt file
corpus_content = load_file(file_path)

# Example input sentence for translation
input_sentence = "She let the cat out of the bag."

# Get the translation from Claude Sonnet using Few-Shot Learning
translated_sentence = translate_with_few_shot(input_sentence, corpus_content)
print(f"Translated sentence: {translated_sentence}")


